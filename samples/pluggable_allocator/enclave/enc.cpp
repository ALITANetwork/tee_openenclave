// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <queue>

// Include the trusted allocator_demo header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the allocator_demo.edl file.
#include "allocator_demo_t.h"

#define QUEUE_LENGTH 15

__attribute__((used)) static bool _init = (srand((unsigned)time(NULL)), true);

void enclave_thread(uint64_t num_allocations, uint64_t max_allocation_size)
{
    std::queue<void*> allocations;

    // Fill queue with null pointers.
    for (uint32_t i = 0; i < QUEUE_LENGTH; ++i)
        allocations.push(nullptr);

    for (uint64_t i = 0; i < num_allocations; ++i)
    {
        // Pop item from queue.
        void* ptr = allocations.front();
        allocations.pop();

        // allocate object and add to queue.
        uint64_t bytes = uint64_t(rand()) % max_allocation_size;
        allocations.push(malloc(bytes));

        // Free last popped item.
        free(ptr);
    }

    // Clear the queue.
    while (!allocations.empty())
    {
        void* ptr = allocations.front();
        allocations.pop();
        free(ptr);
    }
}
