// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

/*
**==============================================================================
**
** sgx/attestation.edl:
**
**     Internal ECALLs/OCALLs to be used by liboehost/liboecore for SGX-specific
**     attestation.
**
**==============================================================================
*/

enclave
{
    include "openenclave/bits/types.h"

    // Most types in sgxtypes.h are packed to ensure the memory layout is
    // the same as data retrieved from the CPU. Since EDL does not support
    // packed structures, these types cannot be defined in EDL. They do not
    // need the benefit of deep copy because they are all laid out in
    // contiguous memory.
    include "openenclave/bits/sgx/sgxtypes.h"

    trusted
    {
        public oe_result_t oe_get_sgx_report_ecall(
            [in, size=opt_params_size] const void* opt_params,
            size_t opt_params_size,
            [out] sgx_report_t* report);

        public oe_result_t oe_get_report_v2_ecall(
            uint32_t flags,
            [in, size=opt_params_size] const void* opt_params,
            size_t opt_params_size,
            [out] uint8_t** report_buffer,
            [out] size_t* report_buffer_size);

        public oe_result_t oe_verify_local_report_ecall(
            [in, size=report_size] const uint8_t* report,
            size_t report_size,
            [out] oe_report_t* parsed_report);
    };

    untrusted
    {
        // Input and output size values in number of bytes,
        //    not number of UUIDs
        // If format_ids buffer is NULL or too small,
        // return needed buffer size in format_ids_size_out
        oe_result_t oe_get_supported_attester_format_ids_ocall(
            [out, size=format_ids_size] void* format_ids,
            size_t format_ids_size,
            [out] size_t* format_ids_size_out);

        oe_result_t oe_get_qetarget_info_ocall(
            [in] const oe_uuid_t* format_id,
            [in, size=opt_params_size] const void* opt_params,
            size_t opt_params_size,
            [out] sgx_target_info_t* target_info);

        oe_result_t oe_get_quote_ocall(
            [in] const oe_uuid_t* format_id,
            [in, size=opt_params_size] const void* opt_params,
            size_t opt_params_size,
            [in] const sgx_report_t* sgx_report,
            [out, size=quote_size] void* quote,
            size_t quote_size,
            [out] size_t* quote_size_out);

        oe_result_t oe_get_quote_verification_collateral_ocall(
            [in] uint8_t fmspc[6],
            uint8_t collateral_provider,
            [out, size=tcb_info_size] void* tcb_info,
            size_t tcb_info_size,
            [out] size_t* tcb_info_size_out,
            [out, size=tcb_info_issuer_chain_size] void* tcb_info_issuer_chain,
            size_t tcb_info_issuer_chain_size,
            [out] size_t* tcb_info_issuer_chain_size_out,
            [out, size=pck_crl_size] void* pck_crl,
            size_t pck_crl_size,
            [out] size_t* pck_crl_size_out,
            [out, size=root_ca_crl_size] void* root_ca_crl,
            size_t root_ca_crl_size,
            [out] size_t* root_ca_crl_size_out,
            [out, size=pck_crl_issuer_chain_size] void* pck_crl_issuer_chain,
            size_t pck_crl_issuer_chain_size,
            [out] size_t* pck_crl_issuer_chain_size_out,
            [out, size=qe_identity_size] void* qe_identity,
            size_t qe_identity_size,
            [out] size_t* qe_identity_size_out,
            [out, size=qe_identity_issuer_chain_size] void* qe_identity_issuer_chain,
            size_t qe_identity_issuer_chain_size,
            [out] size_t* qe_identity_issuer_chain_size_out);

        oe_result_t oe_verify_quote_ocall(
            [in] const oe_uuid_t* format_id,
            [in, size=opt_params_size] const void* opt_params,
            size_t opt_params_size,
            [in, size=quote_size] const void* p_quote,
            uint32_t quote_size,
            const time_t expiration_check_date,
            [out] uint32_t* p_collateral_expiration_status,
            [out] uint32_t* p_quote_verification_result,
            [in, out, size=qve_report_info_size] void* p_qve_report_info,
            uint32_t qve_report_info_size,
            [out, size=supplemental_data_size] void* p_supplemental_data,
            uint32_t supplemental_data_size,
            [out] uint32_t* p_supplemental_data_size_out,
            uint32_t collateral_version,
            [in, size=tcb_info_size] const void* p_tcb_info,
            uint32_t tcb_info_size,
            [in, size=tcb_info_issuer_chain_size] const void* p_tcb_info_issuer_chain,
            uint32_t tcb_info_issuer_chain_size,
            [in, size=pck_crl_size] const void* p_pck_crl,
            uint32_t pck_crl_size,
            [in, size=root_ca_crl_size] const void* p_root_ca_crl,
            uint32_t root_ca_crl_size,
            [in, size=pck_crl_issuer_chain_size] const void* p_pck_crl_issuer_chain,
            uint32_t pck_crl_issuer_chain_size,
            [in, size=qe_identity_size] const void* p_qe_identity,
            uint32_t qe_identity_size,
            [in, size=qe_identity_issuer_chain_size] const void* p_qe_identity_issuer_chain,
            uint32_t qe_identity_issuer_chain_size);
    };
};
