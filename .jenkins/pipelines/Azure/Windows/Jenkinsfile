// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

@Library("OpenEnclaveCommon") _
oe = new jenkins.common.Openenclave()

GLOBAL_TIMEOUT_MINUTES = 240
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

DOCKER_TAG = env.DOCKER_TAG ?: "latest"
AGENTS_LABELS = [
    "ubuntu-nonsgx":    env.UBUNTU_NONSGX_CUSTOM_LABEL ?: "nonSGX",
    "acc-win2016":      env.WINDOWS_2016_CUSTOM_LABEL ?: "SGXFLC-Windows",
    "acc-win2016-dcap": env.WINDOWS_2016_DCAP_CUSTOM_LABEL ?: "SGXFLC-Windows-DCAP"
]

def win2016LinuxElfBuild(String version, String compiler, String build_type, String lvi_mitigation = 'None', String lvi_mitigation_tests = 'OFF') {
    stage("Ubuntu ${version} SGX1 ${compiler} ${build_type} LVI_MITIGATION=${lvi_mitigation}") {
        node(AGENTS_LABELS["ubuntu-nonsgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE}                                         \
                               -G Ninja                                               \
                               -DCMAKE_BUILD_TYPE=${build_type}                       \
                               -DHAS_QUOTE_PROVIDER=ON                                \
                               -DLVI_MITIGATION=${lvi_mitigation}                     \
                               -DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin  \
                               -DENABLE_LVI_MITIGATION_TESTS=${lvi_mitigation_tests}  \
                               -Wdev
                           ninja -v
                           """
                oe.ContainerRun("oetools-full-${version}:${DOCKER_TAG}", compiler, task, "--cap-add=SYS_PTRACE")
                stash includes: 'build/tests/**', name: "linux-${compiler}-${build_type}-lvi_mitigation=${lvi_mitigation}-${version}-${BUILD_NUMBER}"
            }
        }
    }
    stage("Windows ${build_type} LVI_MITIGATION=${lvi_mitigation}") {
        node(AGENTS_LABELS["acc-win2016-dcap"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux-${compiler}-${build_type}-lvi_mitigation=${lvi_mitigation}-${version}-${BUILD_NUMBER}"
                bat 'move build linuxbin'
                dir('build') {
                  bat """
                      vcvars64.bat x64 && \
                      cmake.exe ${WORKSPACE} -G Ninja -DADD_WINDOWS_ENCLAVE_TESTS=ON -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=ON -DCMAKE_BUILD_TYPE=${build_type} -DLINUX_BIN_DIR=${WORKSPACE}\\linuxbin\\tests -DLVI_MITIGATION=${lvi_mitigation} -DENABLE_LVI_MITIGATION_TESTS=${lvi_mitigation_tests} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                      ninja -v && \
                      ctest.exe -V -C ${build_type} --timeout ${CTEST_TIMEOUT_SECONDS}
                      """
                }
            }
        }
    }
}

def win2016CrossCompile(String build_type, String has_quote_provider = 'OFF', String lvi_mitigation = 'None', String lvi_mitigation_tests = 'OFF', String OE_SIMULATION = "0") {
    def node_label = AGENTS_LABELS["acc-win2016"]
    if (has_quote_provider == "ON") {
        node_label = AGENTS_LABELS["acc-win2016-dcap"]
    }
    stage("Windows ${build_type} with SGX ${has_quote_provider} LVI_MITIGATION=${lvi_mitigation}") {
        node(node_label) {
            withEnv(["OE_SIMULATION=${OE_SIMULATION}"]) {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    oe.WinCompilePackageTest("build/X64-${build_type}", build_type, has_quote_provider, CTEST_TIMEOUT_SECONDS, lvi_mitigation)
                }
            }
        }
    }
}

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])

try{
    oe.emailJobStatus('STARTED')
    parallel "Win2016 Ubuntu1604 clang-7 Debug Linux-Elf-build" :       { win2016LinuxElfBuild('16.04', 'clang-7', 'Debug') },
             "Win2016 Ubuntu1604 clang-7 Release Linux-Elf-build" :     { win2016LinuxElfBuild('16.04', 'clang-7', 'Release') },
             "Win2016 Ubuntu1604 clang-7 Debug Linux-Elf-build LVI" :   { win2016LinuxElfBuild('16.04', 'clang-7', 'Debug', 'ControlFlow', 'ON') },
             "Win2016 Ubuntu1604 clang-7 Release Linux-Elf-build LVI" : { win2016LinuxElfBuild('16.04', 'clang-7', 'Release', 'ControlFlow', 'ON') },
             "Win2016 Ubuntu1804 clang-7 Debug Linux-Elf-build" :       { win2016LinuxElfBuild('18.04', 'clang-7', 'Debug') },
             "Win2016 Ubuntu1804 clang-7 Release Linux-Elf-build" :     { win2016LinuxElfBuild('18.04', 'clang-7', 'Release') },
             "Win2016 Ubuntu1804 clang-7 Debug Linux-Elf-build LVI" :   { win2016LinuxElfBuild('18.04', 'clang-7', 'Debug', 'ControlFlow', 'ON') },
             "Win2016 Ubuntu1804 clang-7 Release Linux-Elf-build LVI" : { win2016LinuxElfBuild('18.04', 'clang-7', 'Release', 'ControlFlow', 'ON') },
             "Win2016 Ubuntu1804 gcc Debug Linux-Elf-build" :           { win2016LinuxElfBuild('18.04', 'gcc', 'Debug') },
             "Win2016 Ubuntu1804 gcc Debug Linux-Elf-build LVI" :       { win2016LinuxElfBuild('18.04', 'gcc', 'Debug', 'ControlFlow', 'ON') },
             "Win2016 Sim Debug Cross Compile" :                        { win2016CrossCompile('Debug', 'OFF', 'None', '1') },
             "Win2016 Sim Release Cross Compile" :                      { win2016CrossCompile('Release','OFF', 'None', '1') },
             "Win2016 Sim Debug Cross Compile LVI " :                   { win2016CrossCompile('Debug', 'OFF', 'ControlFlow', 'ON', '1') },
             "Win2016 Sim Release Cross Compile LVI " :                 { win2016CrossCompile('Release', 'OFF', 'ControlFlow', 'ON', '1') },
             "Win2016 Debug Cross Compile with DCAP libs" :             { win2016CrossCompile('Debug', 'ON') },
             "Win2016 Release Cross Compile with DCAP libs" :           { win2016CrossCompile('Release', 'ON') },
             "Win2016 Debug Cross Compile DCAP LVI" :                   { win2016CrossCompile('Debug', 'ON', 'ControlFlow', 'ON') },
             "Win2016 Release Cross Compile DCAP LVI" :                 { win2016CrossCompile('Release', 'ON', 'ControlFlow', 'ON') }
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
