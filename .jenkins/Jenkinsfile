// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

@Library("OpenEnclaveCommon") _
oe = new jenkins.common.Openenclave()

GLOBAL_TIMEOUT_MINUTES = 240
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

// Template used for tests running in Docker container with access to SGX driver on the host
def ubuntuTemplate(String version, Closure body) {
   if (version == "xenial") {
       image_name = 'oeciteam/oetools-full-16.04'
   } else if (version == "bionic"){
       image_name = 'oeciteam/oetools-full-18.04'
   } else {
       println("Supported Ubuntu versions are: xenial and bionic")
       currentBuild.result = 'FAILED'
       return
   }
   podTemplate(label: "${env.BUILD_TAG}-${version}",
               nodeSelector: "agentpool=agents${version}",
               runAsUser: "1002",
               runAsGroup: "1002",
               containers: [
                 containerTemplate(name: "oetools-${version}",
                                   image: image_name,
                                   alwaysPullImage: true,
                                   ttyEnabled: true,
                                   resourceRequestCpu: '2',
                                   resourceLimitCpu: '2',
                                   resourceRequestMemory: '8Gi',
                                   resourceLimitMemory: '8Gi',
                                   privileged: true)
               ],
               volumes: [
                 hostPathVolume(mountPath: '/dev/sgx', hostPath: '/dev/sgx')
               ]) {
                 body()
               }
}

// Template used for simulation tests in docker containers
def nonSGXUbuntuTemplate(String version, Closure body) {
   if (version == "xenial") {
       image_name = 'oeciteam/oetools-full-16.04'
   } else if (version == "bionic") {
       image_name = 'oeciteam/oetools-full-18.04'
   } else {
       println("Supported Ubuntu versions are: xenial and bionic")
       currentBuild.result = 'FAILED'
       return
   }
   podTemplate(label: "${env.BUILD_TAG}-${version}",
               nodeSelector: "agentpool=agents${version}",
               runAsUser: '1002',
               runAsGroup: "1002",
               containers: [
                 containerTemplate(name: "oetools-${version}",
                                   image: image_name,
                                   alwaysPullImage: true,
                                   ttyEnabled: true,
                                   resourceRequestCpu: '2',
                                   resourceLimitCpu: '2',
                                   resourceRequestMemory: '8Gi',
                                   resourceLimitMemory: '8Gi'
                                   )
               ]) {
                 body()
               }
}

def ACCTest(String version, String compiler, String build_type) {
    stage("ACC ${version} ${compiler} SGX1FLC ${build_type}") {
        node("ACC-${version}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run(compiler, task)
            }
        }
    }
}

def ACCGNUTest() {
    stage("ACC1804 GNU gcc SGX1FLC") {
        node("ACC-bionic") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -DHAS_QUOTE_PROVIDER=ON
                           make
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run("gcc", task)
            }
        }
    }
}

def simulationTest(String version, String platform_mode, String build_type) {
    def has_quote_provider = "OFF"
    if (platform_mode == "SGX1FLC") {
        has_quote_provider = "ON"
    }
    stage("Sim clang-7 Ubuntu${version} ${platform_mode} ${build_type}") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    checkout scm
                    withEnv(["OE_SIMULATION=1"]) {
                        def task = """
                                   cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DHAS_QUOTE_PROVIDER=${has_quote_provider} -Wdev
                                   ninja -v
                                   ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                                   """
                        oe.Run("clang-7", task)
                    }
                }
            }
        }
    }
}

def AArch64GNUTest(String version, String build_type) {
    stage("AArch64 GNU gcc Ubuntu${version} ${build_type}") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    def task = """
                                cmake ${WORKSPACE}                                                     \
                                    -G Ninja                                                           \
                                    -DCMAKE_BUILD_TYPE=${build_type}                                   \
                                    -DCMAKE_TOOLCHAIN_FILE=${WORKSPACE}/cmake/arm-cross.cmake          \
                                    -DOE_TA_DEV_KIT_DIR=/devkits/vexpress-qemu_armv8a/export-ta_arm64  \
                                    -DHAS_QUOTE_PROVIDER=OFF                                           \
                                    -Wdev
                                ninja -v
                                """
                    oe.Run("cross", task)
                }
            }
        }
    }
}

def ACCContainerTest(String version, String compiler, String build_type) {
    node("${env.BUILD_TAG}-${version}") {
        container("oetools-${version}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                stage("Build Openenclave ${build_type} with ${compiler} on oetools-${version}") {
                    checkout scm
                    def task = """
                               cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                               ninja -v
                               ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                               """
                    oe.Run(compiler, task)
                }
            }
        }
    }
}

def ACCPackageTest(String version) {
    stage("ACC-${version} Container RelWithDebInfo") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    def task = """
                               cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -Wdev -DCMAKE_INSTALL_PREFIX:PATH='/opt/openenclave' -DCPACK_GENERATOR=DEB
                               ninja -v
                               ninja -v package
                               sudo ninja -v install
                               cp -r /opt/openenclave/share/openenclave/samples ~/
                               cd ~/samples
                               source /opt/openenclave/share/openenclave/openenclaverc
                               for i in *; do
                                   if [ -d \${i} ]; then
                                       cd \${i}
                                       mkdir build
                                       cd build
                                       cmake ..
                                       make
                                       make run
                                       cd ../..
                                   fi
                               done
                               """
                    oe.Run("clang-7", task)
                }
            }
        }
    }
}

def checkDevFlows(String version) {
    stage('Default compiler') {
      node("${env.BUILD_TAG}-${version}") {
          container("oetools-${version}") {
              timeout(GLOBAL_TIMEOUT_MINUTES) {
                  cleanWs()
                  checkout scm
                  def task = """
                             cmake ${WORKSPACE} -G Ninja -DHAS_QUOTE_PROVIDER=OFF -Wdev --warn-uninitialized -Werror=dev
                             ninja -v
                             """
                  oe.Run("clang-7", task)
              }
          }
        }
    }
}

def checkCI() {
    stage('Check CI') {
        podTemplate(label: "${env.BUILD_TAG}-minimal",
                    nodeSelector: "agentpool=agentsbionic",
                    containers: [
                      containerTemplate(name: "oetools-minimal",
                                        image: 'oeciteam/oetools-minimal-18.04',
                                        alwaysPullImage: true,
                                        ttyEnabled: true,
                                        resourceRequestCpu: '500m',
                                        resourceLimitCpu: '1',
                                        resourceRequestMemory: '2Gi',
                                        resourceLimitMemory: '4Gi')
                    ]) {
                        node("${env.BUILD_TAG}-minimal") {
                            container("oetools-minimal") {
                                timeout(GLOBAL_TIMEOUT_MINUTES) {
                                    cleanWs()
                                    checkout scm
                                    // At the moment, the check-ci script assumes that it's executed from the
                                    // root source code directory.
                                    oe.Run("clang-7", "cd ${WORKSPACE} && ./scripts/check-ci")
                                }
                            }
                        }
                    }
    }
}

def win2016LinuxElfBuild(String version, String compiler, String build_type) {
    stage("Ubuntu ${version} SGX1 ${compiler} ${build_type}}") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    def task = """
                               cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DHAS_QUOTE_PROVIDER=ON -Wdev
                               ninja -v
                               """
                    oe.Run(compiler, task)
                    stash includes: 'build/tests/**', name: "linux-${compiler}-${build_type}-${version}-${BUILD_NUMBER}"
                }
            }
        }
    }
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows-DCAP') {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux-${compiler}-${build_type}-${version}-${BUILD_NUMBER}"
                bat 'move build linuxbin'
                dir('build') {
                  bat """
                      vcvars64.bat x64 && \
                      cmake.exe ${WORKSPACE} -G Ninja -DADD_WINDOWS_ENCLAVE_TESTS=ON -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=ON -DCMAKE_BUILD_TYPE=${build_type} -DLINUX_BIN_DIR=${WORKSPACE}\\linuxbin\\tests -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                      ninja -v && \
                      ctest.exe -V -C ${build_type} --timeout ${CTEST_TIMEOUT_SECONDS}
                      """
                }
            }
        }
    }
}

def win2016CrossCompile(String build_type, String has_quote_provider = 'OFF') {
    def node_label = 'SGXFLC-Windows'
    if (has_quote_provider == "ON") {
        node_label = 'SGXFLC-Windows-DCAP'
    }
    stage("Windows ${build_type} with SGX ${has_quote_provider}") {
        node(node_label) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                dir("build/X64-${build_type}") {

                  /* We need to copy nuget into the expected location
                  https://github.com/openenclave/openenclave/blob/a982b46cf440def8fb66e94f2622a4f81e2b350b/host/CMakeLists.txt#L188-L197 */

                  bat """
                      vcvars64.bat x64 && \
                      cmake.exe ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DBUILD_ENCLAVES=ON -DHAS_QUOTE_PROVIDER=${has_quote_provider} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                      ninja.exe && \
                      ctest.exe -V -C ${build_type} --timeout ${CTEST_TIMEOUT_SECONDS}
                      """
                }
            }
        }
    }
}

def ACCHostVerificationTest(String version, String build_type) {

        /* Compile tests in SGX machine.  This will generate the necessary certs for the
        * host_verify test.
        */
        stage("Ubuntu 18.04 Generate Quote") {
            node("${env.BUILD_TAG}-bionic") {
                container("oetools-bionic") {
                    timeout(GLOBAL_TIMEOUT_MINUTES) {
                        cleanWs()
                        checkout scm

                        println("Generating certificates and reports ...")
                        def task = """
                                cmake ${WORKSPACE} -G Ninja -DHAS_QUOTE_PROVIDER=ON -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                                ninja -v
                                pushd tests/host_verify/host
                                openssl ecparam -name prime256v1 -genkey -noout -out keyec.pem
                                openssl ec -in keyec.pem -pubout -out publicec.pem
                                openssl genrsa -out keyrsa.pem 2048
                                openssl rsa -in keyrsa.pem -outform PEM -pubout -out publicrsa.pem
                                ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --cert keyec.pem publicec.pem --out sgx_cert_ec.der
                                ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --cert keyrsa.pem publicrsa.pem --out sgx_cert_rsa.der
                                ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --report --out sgx_report.bin
                                popd
                                """
                        oe.Run("clang-7", task)

                        def ec_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_ec.der'
                        def rsa_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_rsa.der'
                        def report_created = fileExists 'build/tests/host_verify/host/sgx_report.bin'
                        if (ec_cert_created) {
                            println("EC cert file created successfully!")
                        } else {
                            error("Failed to create EC cert file.")
                        }
                        if (rsa_cert_created) {
                            println("RSA cert file created successfully!")
                        } else {
                            error("Failed to create RSA cert file.")
                        }
                        if (report_created) {
                            println("SGX report file created successfully!")
                        } else {
                            error("Failed to create SGX report file.")
                        }
                  }
                    stash includes: 'build/tests/host_verify/host/*.der,build/tests/host_verify/host/*.bin', name: "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                }
            }
        }

        /* Compile the tests with HAS_QUOTE_PROVIDER=OFF and unstash the certs over for verification.  */
        stage("Linux nonSGX Verify Quote") {
            node("${env.BUILD_TAG}-${version}") {
                container("oetools-${version}") {
                    timeout(GLOBAL_TIMEOUT_MINUTES) {
                        cleanWs()
                        checkout scm
                        unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                        def task = """
                                cmake ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=OFF -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                                ninja -v
                                ctest -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                                """
                        // Note: Include the commands to build and run the quote verification test above
                        oe.Run("clang-7", task)
                    }
                }
            }
        }

        /* Windows nonSGX stage. */
        stage("Windows nonSGX Verify Quote") {
            node("nonSGX-Windows") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                    dir('build') {
                        bat """
                            vcvars64.bat x64 && \
                            cmake.exe ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=OFF -DCMAKE_BUILD_TYPE=${build_type} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                            ninja -v && \
                            ctest.exe -V -C ${build_type} -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                            """
                    }
                }
            }
        }
 }

def RHEL8Test(String compiler, String build_type, List test_env = []) {
    stage("ACC-RHEL-8 ${compiler} ${build_type}, test_env: ${test_env}") {
        node("ACC-RHEL-8") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DHAS_QUOTE_PROVIDER=OFF -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                withEnv(test_env) {
                    oe.Run(compiler, task)
                }
            }
        }
    }
}

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])


try{
    oe.emailJobStatus('STARTED')
    checkCI()
    parallel "Check Developer Experience Ubuntu 16.04" :           { checkDevFlows('xenial') },
            "Check Developer Experience Ubuntu 18.04" :            { checkDevFlows('bionic') },
            "ACC1604 clang-7 Debug" :                              { ACCTest('xenial', 'clang-7', 'Debug') },
            "ACC1604 clang-7 Release" :                            { ACCTest('xenial', 'clang-7', 'Release') },
            "ACC1604 gcc Debug" :                                  { ACCTest('xenial', 'gcc', 'Debug') },
            "ACC1604 gcc Release" :                                { ACCTest('xenial', 'gcc', 'Release') },
            "ACC1604 Container RelWithDebInfo" :                   { ubuntuTemplate('xenial') { ACCContainerTest('xenial', "clang-7", 'RelWithDebInfo') } },
            "ACC1604 Package RelWithDebInfo" :                     { ubuntuTemplate('xenial') { ACCPackageTest('xenial') } },
            "ACC1804 clang-7 Debug" :                              { ACCTest('bionic', 'clang-7', 'Debug') },
            "ACC1804 clang-7 Release" :                            { ACCTest('bionic', 'clang-7', 'Release') },
            "ACC1804 gcc Debug" :                                  { ACCTest('bionic', 'gcc', 'Debug') },
            "ACC1804 gcc Release" :                                { ACCTest('bionic', 'gcc', 'Release') },
            "ACC1804 Container RelWithDebInfo" :                   { ubuntuTemplate('bionic'){ ACCContainerTest('bionic', "clang-7", 'RelWithDebInfo') } },
            "ACC1804 Package RelWithDebInfo" :                     { ubuntuTemplate('bionic') { ACCPackageTest('bionic') } },
            "ACC1804 GNU gcc SGX1FLC" :                            { ACCGNUTest() },
            "AArch64 1604 GNU gcc Debug" :                         { nonSGXUbuntuTemplate('xenial') { AArch64GNUTest('xenial', 'Debug') } },
            "AArch64 1604 GNU gcc Release" :                       { nonSGXUbuntuTemplate('xenial') { AArch64GNUTest('xenial', 'Release') } },
            "AArch64 1804 GNU gcc Debug" :                         { nonSGXUbuntuTemplate('bionic') { AArch64GNUTest('bionic', 'Debug') } },
            "AArch64 1804 GNU gcc Release" :                       { nonSGXUbuntuTemplate('bionic') { AArch64GNUTest('bionic', 'Release') } },
            "Sim 1804 clang-7 SGX1 Debug" :                        { nonSGXUbuntuTemplate("bionic") { simulationTest('bionic', 'SGX1', 'Debug') } },
            "Sim 1804 clang-7 SGX1 Release" :                      { nonSGXUbuntuTemplate("bionic") { simulationTest('bionic', 'SGX1', 'Release') } },
            "Sim 1804 clang-7 SGX1-FLC Debug" :                    { nonSGXUbuntuTemplate("bionic") { simulationTest('bionic', 'SGX1FLC', 'Debug') } },
            "Sim 1804 clang-7 SGX1-FLC Release" :                  { nonSGXUbuntuTemplate("bionic") { simulationTest('bionic', 'SGX1FLC', 'Release') } },
            "Win2016 Ubuntu1604 clang-7 Debug Linux-Elf-build" :   { ubuntuTemplate("xenial") { win2016LinuxElfBuild('xenial', 'clang-7', 'Debug') } },
            "Win2016 Ubuntu1604 clang-7 Release Linux-Elf-build" : { ubuntuTemplate("xenial") { win2016LinuxElfBuild('xenial', 'clang-7', 'Release') } },
            "Win2016 Ubuntu1804 clang-7 Debug Linux-Elf-build" :   { ubuntuTemplate("bionic") { win2016LinuxElfBuild('bionic', 'clang-7', 'Debug') } },
            "Win2016 Ubuntu1804 clang-7 Release Linux-Elf-build" : { ubuntuTemplate("bionic") { win2016LinuxElfBuild('bionic', 'clang-7', 'Release') } },
            "Win2016 Ubuntu1804 gcc Debug Linux-Elf-build" :       { ubuntuTemplate("bionic") { win2016LinuxElfBuild('bionic', 'gcc', 'Debug') } },
            "Win2016 Debug Cross Compile" :                        { win2016CrossCompile('Debug') },
            "Win2016 Release Cross Compile" :                      { win2016CrossCompile('Release') },
            "Win2016 Debug Cross Compile with DCAP libs" :         { win2016CrossCompile('Debug', 'ON') },
            "Win2016 Release Cross Compile with DCAP libs" :       { win2016CrossCompile('Release', 'ON') },
            "Host verification 1604 Debug" :                       { ubuntuTemplate("xenial") { ACCHostVerificationTest('xenial', 'Debug') } } ,
            "Host verification 1604 Release" :                     { ubuntuTemplate("xenial") { ACCHostVerificationTest('xenial', 'Release') } } ,
            "Host verification 1804 Debug" :                       { ubuntuTemplate("bionic") { ACCHostVerificationTest('bionic', 'Debug') } } ,
            "Host verification 1804 Release" :                     { ubuntuTemplate("bionic") { ACCHostVerificationTest('bionic', 'Release') } },
            // "RHEL-8 simulation clang-8 SGX1 Release":              { RHEL8Test('clang', 'Release', ["OE_SIMULATION=1"]) }, // Enable when https://github.com/openenclave/openenclave/issues/2556 is fixed.
            "RHEL-8 simulation clang-8 SGX1 Debug":                { RHEL8Test('clang', 'Debug',   ["OE_SIMULATION=1"]) },
            // "RHEL-8 simulation gcc-8 Release":                     { RHEL8Test('gcc',   'Release', ["OE_SIMULATION=1"]) }, // Enable when https://github.com/openenclave/openenclave/issues/2558 is fixed.
            "RHEL-8 simulation gcc-8 SGX1 Debug":                  { RHEL8Test('gcc',   'Debug',   ["OE_SIMULATION=1"]) },
            // "RHEL-8 ACC clang-8 Release" :                         { RHEL8Test('clang', 'Release') },                      // Enable when https://github.com/openenclave/openenclave/issues/2556 is fixed.
            // "RHEL-8 ACC clang-8 Debug" :                           { RHEL8Test('clang', 'Debug') },                        // Enable when https://github.com/openenclave/openenclave/issues/2557 is fixed.
            // "RHEL-8 ACC gcc-8 Release" :                           { RHEL8Test('gcc',   'Release') },                      // Enable when https://github.com/openenclave/openenclave/issues/2558 is fixed.
            "RHEL-8 ACC gcc-8 Debug" :                             { RHEL8Test('gcc',   'Debug') }
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
