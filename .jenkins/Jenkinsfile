// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

@Library("OpenEnclaveCommon") _
oe = new jenkins.common.Openenclave()

GLOBAL_TIMEOUT_MINUTES = 240
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

def ubuntuTemplate(String version, Closure body) {
   if (version == "xenial") {
       image_name = 'oeciteam/oetools-full-16.04'
   } else if (version == "bionic"){
       image_name = 'oeciteam/oetools-full-18.04'
   } else {
       println("Supported Ubuntu versions are: xenial and bionic")
       currentBuild.result = 'FAILED'
       return
   }
   podTemplate(label: "${env.BUILD_TAG}-${version}",
               nodeSelector: "agentpool=agents${version}",
               containers: [
                 containerTemplate(name: "oetools-${version}",
                                   image: image_name,
                                   alwaysPullImage: true,
                                   ttyEnabled: true,
                                   resourceRequestCpu: '500m',
                                   resourceLimitCpu: '1',
                                   resourceRequestMemory: '2Gi',
                                   resourceLimitMemory: '4Gi',
                                   privileged: true)
               ],
               volumes: [
                 hostPathVolume(mountPath: '/dev/sgx', hostPath: '/dev/sgx')
               ]) {
                 body()
               }
}


def nonSGXUbuntuTemplate(String version, Closure body) {
   if (version == "xenial") {
       image_name = 'oeciteam/oetools-full-16.04'
   } else if (version == "bionic") {
       image_name = 'oeciteam/oetools-full-18.04'
   } else if (version == "minimal") {
       image_name = 'oeciteam/oetools-minimal-18.04'
       version = "bionic"
   } else {
       println("Supported Ubuntu versions are: xenial,bionic and minimal")
       currentBuild.result = 'FAILED'
       return
   }
   podTemplate(label: "${env.BUILD_TAG}-${version}",
               nodeSelector: "agentpool=agents${version}",
               containers: [
                 containerTemplate(name: "oetools-${version}",
                                   image: image_name,
                                   alwaysPullImage: true,
                                   ttyEnabled: true,
                                   resourceRequestCpu: '500m',
                                   resourceLimitCpu: '1',
                                   resourceRequestMemory: '2Gi',
                                   resourceLimitMemory: '4Gi')
               ]) {
                 body()
               }
}

def ACCTest(String version, String compiler, String build_type) {
    stage("ACC ${version} ${compiler} SGX1FLC ${build_type}") {
        node("ACC-${version}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run(compiler, task)
            }
        }
    }
}

def ACCGNUTest() {
    stage("ACC1804 GNU gcc SGX1FLC") {
        node("ACC-bionic") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -DHAS_QUOTE_PROVIDER=ON
                           make
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run("gcc", task)
            }
        }
    }
}

def simulationTest(String version, String platform_mode, String build_type) {
    def has_quote_provider = "OFF"
    if (platform_mode == "SGX1FLC") {
        has_quote_provider = "ON"
    }
    stage("Sim clang-7 Ubuntu${version} ${platform_mode} ${build_type}") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    checkout scm
                    withEnv(["OE_SIMULATION=1"]) {
                        def task = """
                                   cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DHAS_QUOTE_PROVIDER=${has_quote_provider} -Wdev
                                   ninja -v
                                   ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                                   """
                        oe.Run("clang-7", task)
                    }
                }
            }
        }
    }
}

def AArch64GNUTest(String version, String build_type) {
    stage("AArch64 GNU gcc Ubuntu${version} ${build_type}") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    def task = """
                                cmake ${WORKSPACE}                                                     \
                                    -G Ninja                                                           \
                                    -DCMAKE_BUILD_TYPE=${build_type}                                   \
                                    -DCMAKE_TOOLCHAIN_FILE=${WORKSPACE}/cmake/arm-cross.cmake          \
                                    -DOE_TA_DEV_KIT_DIR=/devkits/vexpress-qemu_armv8a/export-ta_arm64  \
                                    -DHAS_QUOTE_PROVIDER=OFF                                           \
                                    -Wdev
                                ninja -v
                                """
                    oe.Run("cross", task)
                }
            }
        }
    }
}

def accK8sTest(String version, String compiler, String build_type) {
    node("${env.BUILD_TAG}-${version}") {
        container("oetools-${version}") {
            stage("Build Openenclave ${build_type} with ${compiler} on oetools-${version}") {
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run(compiler, task)
            }
        }
    }
}

def ACCPackageTest(String version) {
    stage("ACC-${version} Container RelWithDebInfo") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    def task = """
                               cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -Wdev -DCMAKE_INSTALL_PREFIX:PATH='/opt/openenclave' -DCPACK_GENERATOR=DEB
                               ninja -v
                               ninja -v package
                               sudo ninja -v install
                               cp -r /opt/openenclave/share/openenclave/samples ~/
                               cd ~/samples
                               source /opt/openenclave/share/openenclave/openenclaverc
                               for i in *; do
                                   if [ -d \${i} ]; then
                                       cd \${i}
                                       mkdir build
                                       cd build
                                       cmake ..
                                       make
                                       make run
                                       cd ../..
                                   fi
                               done
                               """
                    oe.Run("clang-7", task)
                }
            }
        }
    }
}

def checkDevFlows(String version) {
    stage('Default compiler') {
      node("${env.BUILD_TAG}-${version}") {
          container("oetools-${version}") {
              timeout(GLOBAL_TIMEOUT_MINUTES) {
                  cleanWs()
                  checkout scm
                  def task = """
                             cmake ${WORKSPACE} -G Ninja -DHAS_QUOTE_PROVIDER=OFF -Wdev --warn-uninitialized -Werror=dev
                             ninja -v
                             """
                  oe.Run("clang-7", task)
              }
          }
        }
    }
}

def checkCI() {
    stage('Check CI') {
        node("${env.BUILD_TAG}-minimal") {
            container("oetools-minimal") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    // At the moment, the check-ci script assumes that it's executed from the
                    // root source code directory.
                    oe.Run("clang-7", "cd ${WORKSPACE} && ./scripts/check-ci")
                }
            }
        }
    }
}

def win2016LinuxElfBuild(String version, String compiler, String build_type) {
    stage("Ubuntu ${version} SGX1 ${compiler} ${build_type}}") {
        node("${env.BUILD_TAG}-${version}") {
            container("oetools-${version}") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    def task = """
                               cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DHAS_QUOTE_PROVIDER=ON -Wdev
                               ninja -v
                               """
                    oe.Run(compiler, task)
                    // Permission issue for stashed files
                    sh "sudo chown -R \$(id -un):\$(id -gn) ${WORKSPACE}/build"
                    stash includes: 'build/tests/**', name: "linux-${compiler}-${build_type}-${version}-${BUILD_NUMBER}"
                }
            }
        }
    }
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows-DCAP') {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux-${compiler}-${build_type}-${version}-${BUILD_NUMBER}"
                bat 'move build linuxbin'
                dir('build') {
                  bat """
                      vcvars64.bat x64 && \
                      cmake.exe ${WORKSPACE} -G Ninja -DADD_WINDOWS_ENCLAVE_TESTS=ON -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=ON -DCMAKE_BUILD_TYPE=${build_type} -DLINUX_BIN_DIR=${WORKSPACE}\\linuxbin\\tests -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                      ninja -v && \
                      ctest.exe -V -C ${build_type} --timeout ${CTEST_TIMEOUT_SECONDS}
                      """
                }
            }
        }
    }
}

def win2016CrossCompile(String build_type, String has_quote_provider = 'OFF') {
    def node_label = 'SGXFLC-Windows'
    if (has_quote_provider == "ON") {
        node_label = 'SGXFLC-Windows-DCAP'
    }
    stage("Windows ${build_type} with SGX ${has_quote_provider}") {
        node(node_label) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                dir("build/X64-${build_type}") {

                  /* We need to copy nuget into the expected location
                  https://github.com/openenclave/openenclave/blob/a982b46cf440def8fb66e94f2622a4f81e2b350b/host/CMakeLists.txt#L188-L197 */

                  bat """
                      vcvars64.bat x64 && \
                      cmake.exe ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DBUILD_ENCLAVES=ON -DHAS_QUOTE_PROVIDER=${has_quote_provider} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                      ninja.exe && \
                      ctest.exe -V -C ${build_type} --timeout ${CTEST_TIMEOUT_SECONDS}
                      """
                }
            }
        }
    }
}

def ACCHostVerificationTest(String version, String build_type) {

        /* Compile tests in SGX machine.  This will generate the necessary certs for the
        * host_verify test.
        */
        stage("ACC-1804 Generate Quote") {
            node("${env.BUILD_TAG}-bionic") {
                container("oetools-bionic") {
                    timeout(GLOBAL_TIMEOUT_MINUTES) {
                        cleanWs()
                        checkout scm

                        println("Generating certificates and reports ...")
                        def task = """
                                cmake ${WORKSPACE} -G Ninja -DHAS_QUOTE_PROVIDER=ON -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                                ninja -v
                                pushd tests/host_verify/host
                                openssl ecparam -name prime256v1 -genkey -noout -out keyec.pem
                                openssl ec -in keyec.pem -pubout -out publicec.pem
                                openssl genrsa -out keyrsa.pem 2048
                                openssl rsa -in keyrsa.pem -outform PEM -pubout -out publicrsa.pem
                                ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --cert keyec.pem publicec.pem --out sgx_cert_ec.der
                                ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --cert keyrsa.pem publicrsa.pem --out sgx_cert_rsa.der
                                ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --report --out sgx_report.bin
                                popd
                                """
                        oe.Run("clang-7", task)

                        def ec_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_ec.der'
                        def rsa_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_rsa.der'
                        def report_created = fileExists 'build/tests/host_verify/host/sgx_report.bin'
                        if (ec_cert_created) {
                            println("EC cert file created successfully!")
                        } else {
                            error("Failed to create EC cert file.")
                        }
                        if (rsa_cert_created) {
                            println("RSA cert file created successfully!")
                        } else {
                            error("Failed to create RSA cert file.")
                        }
                        if (report_created) {
                            println("SGX report file created successfully!")
                        } else {
                            error("Failed to create SGX report file.")
                        }
                  }
                    stash includes: 'build/tests/host_verify/host/*.der,build/tests/host_verify/host/*.bin', name: "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                }
            }
        }

        /* Compile the tests with HAS_QUOTE_PROVIDER=OFF and unstash the certs over for verification.  */
        stage("Linux nonSGX Verify Quote") {
            node("${env.BUILD_TAG}-${version}") {
                container("oetools-${version}") {
                    timeout(GLOBAL_TIMEOUT_MINUTES) {
                        cleanWs()
                        checkout scm
                        unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                        def task = """
                                cmake ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=OFF -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                                ninja -v
                                ctest -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                                """
                        // Note: Include the commands to build and run the quote verification test above
                        oe.Run("clang-7", task)
                    }
                }
            }
        }

        /* Windows nonSGX stage. */
        stage("Windows nonSGX Verify Quote") {
            node("nonSGX-Windows") {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                    dir('build') {
                        bat """
                            vcvars64.bat x64 && \
                            cmake.exe ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=OFF -DCMAKE_BUILD_TYPE=${build_type} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                            ninja -v && \
                            ctest.exe -V -C ${build_type} -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                            """
                    }
                }
            }
        }
 }

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])


// Build Job matrix for steps to be executed in parallel by looping through the lists below
def versions = ["bionic", "xenial"]
def compilers = ['gcc', 'clang-7']
def build_types = ['Release', 'Debug', 'RelWithDebInfo']
def platform_modes = ['SGX1', 'SGX1FLC']

def stepsForParallel = [:]

versions.each { version ->
    build_types.each { build_type ->
        compilers.each { compiler ->
            stepsForParallel["Container ${version} ${compiler} ${build_type}"] = { ubuntuTemplate(version) { accK8sTest(version, compiler, build_type) } }
            stepsForParallel["ACC ${version} ${compiler} ${build_type}"] = { ACCTest(version, compiler, build_type) }
            stepsForParallel["Win2016 Ubuntu ${version} ${compiler} ${build_type} Linux-Elf-build"] = { ubuntuTemplate(version) { win2016LinuxElfBuild(version, compiler, build_type) } }
        }
        platform_modes.each { platform_mode ->
            stepsForParallel["Simulation ${version} clang-7 ${build_type}"] = { nonSGXUbuntuTemplate(version) { simulationTest(version, platform_mode, build_type) } }
        }
        stepsForParallel["AArch64 ${version} GNU gcc ${build_type}"] = { nonSGXUbuntuTemplate(version) { AArch64GNUTest(version, build_type) } }
        stepsForParallel["Host verification ${version} ${build_type}"] = { ubuntuTemplate(version) { ACCHostVerificationTest(version, build_type) } }
    }
    stepsForParallel["ACC-${version} Package RelWithDebInfo"] = { ubuntuTemplate(version) { ACCPackageTest(version) } }
}
stepsForParallel["Check CI"] = { nonSGXUbuntuTemplate('minimal') { checkCI() } }
build_types.each { build_type ->
    stepsForParallel["Win2016 ${build_type} Cross Compile"] = { win2016CrossCompile(build_type) }
    stepsForParallel["Win2016 ${build_type} Cross Compile with DCAP libs"] = { win2016CrossCompile(build_type, 'ON') }
}
parallel stepsForParallel

try{
    oe.emailJobStatus('STARTED')
    parallel stepsForParallel
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
