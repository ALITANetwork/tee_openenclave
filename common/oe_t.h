// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/*
 *  This file is auto generated by oeedger8r. DO NOT EDIT.
 */
#ifndef EDGER8R_OE_T_H
#define EDGER8R_OE_T_H

#include <openenclave/enclave.h>
#include "oe_args.h"

OE_EXTERNC_BEGIN

/* List of ecalls */

void public_root_ecall(void);

/* List of ocalls */

oe_result_t oe_hostfs_open(
        int* _retval,
        const char* pathname,
        int flags,
        mode_t mode,
        int* err);
oe_result_t oe_hostfs_read(
        ssize_t* _retval,
        int fd,
        void* buf,
        size_t count,
        int* err);
oe_result_t oe_hostfs_write(
        ssize_t* _retval,
        int fd,
        const void* buf,
        size_t count,
        int* err);
oe_result_t oe_hostfs_lseek(
        off_t* _retval,
        int fd,
        off_t offset,
        int whence,
        int* err);
oe_result_t oe_hostfs_close(
        int* _retval,
        int fd,
        int* err);
oe_result_t oe_hostfs_dup(
        int* _retval,
        int oldfd,
        int* err);
oe_result_t oe_hostfs_opendir(
        void** _retval,
        const char* name,
        int* err);
oe_result_t oe_hostfs_readdir(
        int* _retval,
        void* dirp,
        struct oe_hostfs_dirent_struct* ent,
        int* err);
oe_result_t oe_hostfs_rewinddir(
        void* dirp);
oe_result_t oe_hostfs_closedir(
        int* _retval,
        void* dirp,
        int* err);
oe_result_t oe_hostfs_stat(
        int* _retval,
        const char* pathname,
        struct oe_hostfs_stat_struct* buf,
        int* err);
oe_result_t oe_hostfs_access(
        int* _retval,
        const char* pathname,
        int mode,
        int* err);
oe_result_t oe_hostfs_link(
        int* _retval,
        const char* oldpath,
        const char* newpath,
        int* err);
oe_result_t oe_hostfs_unlink(
        int* _retval,
        const char* pathname,
        int* err);
oe_result_t oe_hostfs_rename(
        int* _retval,
        const char* oldpath,
        const char* newpath,
        int* err);
oe_result_t oe_hostfs_truncate(
        int* _retval,
        const char* path,
        off_t length,
        int* err);
oe_result_t oe_hostfs_mkdir(
        int* _retval,
        const char* pathname,
        mode_t mode,
        int* err);
oe_result_t oe_hostfs_rmdir(
        int* _retval,
        const char* pathname,
        int* err);
oe_result_t oe_hostsock_socket(
        int* _retval,
        int domain,
        int type,
        int protocol,
        int* err);
oe_result_t oe_hostsock_socketpair(
        int* _retval,
        int domain,
        int type,
        int protocol,
        int sv[2],
        int* err);
oe_result_t oe_hostsock_connect(
        int* _retval,
        int sockfd,
        const struct sockaddr* addr,
        socklen_t addrlen,
        int* err);
oe_result_t oe_hostsock_accept(
        int* _retval,
        int sockfd,
        struct sockaddr* addr,
        socklen_t addrlen_in,
        socklen_t* addrlen_out,
        int* err);
oe_result_t oe_hostsock_bind(
        int* _retval,
        int sockfd,
        const struct sockaddr* addr,
        socklen_t addrlen,
        int* err);
oe_result_t oe_hostsock_listen(
        int* _retval,
        int sockfd,
        int backlog,
        int* err);
oe_result_t oe_hostsock_recvmsg(
        ssize_t* _retval,
        int sockfd,
        void* msg_name,
        socklen_t msg_namelen_in,
        socklen_t* msg_namelen_out,
        struct iovec* msg_iov,
        size_t msg_iovlen_in,
        size_t* msg_iovlen_out,
        const void* msg_control,
        size_t msg_controllen_in,
        size_t* msg_controllen_out,
        int msg_flags_in,
        int* msg_flags_out,
        int flags,
        int* err);
oe_result_t oe_hostsock_sendmsg(
        ssize_t* _retval,
        int sockfd,
        const void* msg_name,
        socklen_t msg_namelen,
        const struct iovec* msg_iov,
        size_t msg_iovlen,
        const void* msg_control,
        size_t msg_controllen,
        int msg_flags,
        int flags,
        int* err);
oe_result_t oe_hostsock_recv(
        ssize_t* _retval,
        int sockfd,
        void* buf,
        size_t len,
        int flags,
        int* err);
oe_result_t oe_hostsock_recvfrom(
        ssize_t* _retval,
        int sockfd,
        void* buf,
        size_t len,
        int flags,
        struct sockaddr* src_addr,
        socklen_t addrlen_in,
        socklen_t* addrlen_out,
        int* err);
oe_result_t oe_hostsock_send(
        ssize_t* _retval,
        int sockfd,
        const void* buf,
        size_t len,
        int flags,
        int* err);
oe_result_t oe_hostsock_sendto(
        ssize_t* _retval,
        int sockfd,
        const void* buf,
        size_t len,
        int flags,
        const struct sockaddr* dest_addr,
        socklen_t addrlen,
        int* err);
oe_result_t oe_hostsock_shutdown(
        int* _retval,
        int sockfd,
        int how,
        int* err);
oe_result_t oe_hostsock_close(
        int* _retval,
        int fd,
        int* err);
oe_result_t oe_hostsock_dup(
        int* _retval,
        int oldfd,
        int* err);
oe_result_t oe_hostsock_setsockopt(
        int* _retval,
        int sockfd,
        int level,
        int optname,
        const void* optval,
        socklen_t optlen,
        int* err);
oe_result_t oe_hostsock_getsockopt(
        int* _retval,
        int sockfd,
        int level,
        int optname,
        void* optval,
        socklen_t optlen_in,
        socklen_t* optlen_out,
        int* err);
oe_result_t oe_hostsock_getsockname(
        int* _retval,
        int sockfd,
        struct sockaddr* addr,
        socklen_t addrlen_in,
        socklen_t* addrlen_out,
        int* err);
oe_result_t oe_hostsock_getpeername(
        int* _retval,
        int sockfd,
        struct sockaddr* addr,
        socklen_t addrlen_in,
        socklen_t* addrlen_out,
        int* err);
oe_result_t oe_hostsock_shutdown_device(
        int* _retval,
        int sockfd,
        int* err);

OE_EXTERNC_END

#endif // EDGER8R_OE_T_H
