// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

/*
**==============================================================================
**
** internal.edl:
**
**     This file declares internal ECALLs/OCALLs used by liboehost/liboecore
**     for usage with any TEE technology.
**
**==============================================================================
*/

enclave
{
    /**
     * This enumeration defines the type of a asymmetric key.
     * This definition is shared by the enclave and the host.
     */
    enum oe_asymmetric_key_type_t {
        /**
         * A secp256r1/NIST P-256 elliptic curve key.
         */
        OE_ASYMMETRIC_KEY_EC_SECP256P1 = 1,

        /**
         * Unused.
         */
        _OE_ASYMMETRIC_KEY_TYPE_MAX = OE_ENUM_MAX
    };

    /**
     * This enumeration defines the format of the asymmetric key.
     * This definition is shared by the enclave and the host.
     */
    enum oe_asymmetric_key_format_t {
        /**
         * The PEM format.
         */
        OE_ASYMMETRIC_KEY_PEM = 1,

        /**
         * Unused.
         */
        _OE_ASYMMETRIC_KEY_FORMAT_MAX = OE_ENUM_MAX
    };

    /**
     * This struct contains the parameters for asymmetric key derivation.
     * This definition is shared by the enclave and the host.
     */
    struct oe_asymmetric_key_params_t {
        /**
         *  The type of asymmetric key.
         */
        oe_asymmetric_key_type_t type;

        /**
         * The exported format of the key.
         */
        oe_asymmetric_key_format_t format;

        /**
         * Optional user data to add to the key derivation.
         */
        [size=user_data_size] void* user_data;

        /**
         * The size of user_data.
         */
        size_t user_data_size;
    };

    trusted
    {
        public void oe_log_init_ecall(
            [in, string] const char* enclave_path,
            uint32_t log_level);

        public oe_result_t oe_verify_report_ecall(
            [in, size=report_size] const void* report,
            size_t report_size);

        public oe_result_t oe_get_public_key_ecall(
            [in] const oe_asymmetric_key_params_t* key_params,
            [in, size=key_info_size] const void* key_info,
            size_t key_info_size,
            [out, size=key_buffer_size] void* key_buffer,
            size_t key_buffer_size,
            [out] size_t* key_buffer_size_out);

        public oe_result_t oe_get_public_key_by_policy_ecall(
            uint32_t seal_policy,
            [in] const oe_asymmetric_key_params_t* key_params,
            [out, size=key_buffer_size] void* key_buffer,
            size_t key_buffer_size,
            [out] size_t* key_buffer_size_out,
            [out, size=key_info_size] void* key_info,
            size_t key_info_size,
            [out] size_t* key_info_size_out);
    };

    untrusted
    {
        void oe_log_ocall(
            uint32_t log_level,
            [in, string] const char* message);

        void* oe_realloc_ocall(
            [user_check] void* ptr,
            size_t size);

        // Write a string to the console. Write to STDOUT if device=0. Write
        // to STDERR if device=1. Write strnlen(str, maxlen) bytes.
        void oe_write_ocall(
            int device,
            [in, string] const char* str,
            size_t maxlen);
    };
};
