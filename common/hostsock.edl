// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

enclave {

    include "openenclave/bits/defs.h"
    include "openenclave/bits/types.h"

    untrusted {

       int oe_hostsock_socket(
            int domain, 
            int type, 
            int protocol,
            [out, count=1] int* err);

        int oe_hostsock_socketpair(
            int domain, 
            int type, 
            int protocol, 
            [in] int sv[2],
            [out, count=1] int* err);

        int oe_hostsock_connect(
            int sockfd, 
            [in, size=addrlen] const struct sockaddr* addr,
            socklen_t addrlen,
            [out, count=1] int* err);

        int oe_hostsock_accept(
            int sockfd, 
            [in, out, size=addrlen_in] struct sockaddr* addr, 
            socklen_t addrlen_in,
            [out, count=1] socklen_t* addrlen_out,
            [out, count=1] int* err);

        int oe_hostsock_bind(
            int sockfd, 
            [in, size=addrlen] const struct sockaddr* addr,
            socklen_t addrlen,
            [out, count=1] int* err);

        int oe_hostsock_listen(
            int sockfd, 
            int backlog,
            [out, count=1] int* err);

        ssize_t oe_hostsock_recvmsg(
            int sockfd, 
            [in, size=msg_namelen_in] void* msg_name,
            socklen_t msg_namelen_in,
            [out, count=1] socklen_t* msg_namelen_out,
            [in, count=msg_iovlen_in] struct iovec* msg_iov,
            size_t msg_iovlen_in,
            [out, count=1] size_t* msg_iovlen_out,
            [in, size=msg_controllen_in] const void* msg_control,
            size_t msg_controllen_in,
            [out, count=1] size_t* msg_controllen_out,
            int msg_flags_in,
            [out, count=1] int* msg_flags_out,
            int flags,
            [out, count=1] int* err);

        ssize_t oe_hostsock_sendmsg(
            int sockfd, 
            [in, size=msg_namelen] const void* msg_name,
            socklen_t msg_namelen,
            [in, count=msg_iovlen] const struct iovec* msg_iov,
            size_t msg_iovlen,
            [in, size=msg_controllen] const void* msg_control,
            size_t msg_controllen,
            int msg_flags,
            int flags,
            [out, count=1] int* err);

        ssize_t oe_hostsock_recv(
            int sockfd, 
            [in, out, size=len] void* buf, 
            size_t len, 
            int flags,
            [out, count=1] int* err);

        ssize_t oe_hostsock_recvfrom(
            int sockfd, 
            [out, size=len] void* buf, 
            size_t len, 
            int flags,
            [in, out, size=addrlen_in] struct sockaddr* src_addr, 
            socklen_t addrlen_in,
            [out, count=1] socklen_t* addrlen_out,
            [out, count=1] int* err);

        ssize_t oe_hostsock_send(
            int sockfd, 
            [in, size=len] const void* buf, 
            size_t len, 
            int flags,
            [out, count=1] int* err);

        ssize_t oe_hostsock_sendto(
            int sockfd, 
            [in, size=len] const void* buf, 
            size_t len,
            int flags,
            [in, size=addrlen] const struct sockaddr* dest_addr, 
            socklen_t addrlen,
            [out, count=1] int* err);

        int oe_hostsock_shutdown(
            int sockfd, 
            int how,
            [out, count=1] int* err);

        int oe_hostsock_close(
            int fd,
            [out, count=1] int* err);

        int oe_hostsock_dup(
            int oldfd,
            [out, count=1] int* err);

        int oe_hostsock_setsockopt(
            int sockfd, 
            int level, 
            int optname,
            [in, size=optlen] const void* optval, 
            socklen_t optlen,
            [out, count=1] int* err);

        int oe_hostsock_getsockopt(
            int sockfd, 
            int level, 
            int optname,
            [out, size=optlen_in] void* optval,
            socklen_t optlen_in,
            [out] socklen_t* optlen_out,
            [out, count=1] int* err);

        int oe_hostsock_getsockname(
            int sockfd, 
            [in, out, size=addrlen_in] struct sockaddr* addr, 
            socklen_t addrlen_in,
            [out, size=1] socklen_t* addrlen_out,
            [out, count=1] int* err);

        int oe_hostsock_getpeername(
            int sockfd, 
            [in, out, size=addrlen_in] struct sockaddr* addr, 
            socklen_t addrlen_in,
            [out, size=1] socklen_t* addrlen_out,
            [out, count=1] int* err);

        int oe_hostsock_shutdown_device(
            int sockfd, 
            [out, count=1] int* err);
    };
};
