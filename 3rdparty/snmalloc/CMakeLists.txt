# Copyright (c) Open Enclave SDK contributors.
# Licensed under the MIT License.

check_submodule_not_empty("${PROJECT_SOURCE_DIR}/3rdparty/snmalloc/snmalloc")

# oesnmalloc depends on musl_includes and libcxx_includes.
# However specifying those external projects as dependencies does not seem to
# work. Build of oesnmalloc is launched while musl_includes is being built.
# This likely a cmake/ninja bug. Depending on oelibc_includes (which is an
# INTERFACE library that depends on musl_includes) also does not work.
# To ensure that musl_includes and libcxx_includes external projects are
# completed before oesnmalloc is built, we use the custom command below
# that depends on the external projects. The custom command copies header
# files generated by the external projects to oesnmalloc's binary directory.
# oesnmalloc lists the copied header files as sources.
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/deprecations.h
         ${CMAKE_CURRENT_BINARY_DIR}/__config.h
  COMMAND
    ${CMAKE_COMMAND} -E copy
    ${PROJECT_BINARY_DIR}/output/include/openenclave/libc/bits/deprecations.h
    ${CMAKE_CURRENT_BINARY_DIR}/deprecations.h
  COMMAND ${CMAKE_COMMAND} -E copy ${LIBCXX_INCLUDES}/__config
          ${CMAKE_CURRENT_BINARY_DIR}/__config.h
  DEPENDS musl_includes libcxx_includes)

# Create snmalloc_obj OBJECT library to allow snmalloc to be used as
# the default allocator. See DEFAULT_ALLOCATOR in enclave/core/CMakeLists.txt.
# Note: This scenario is possible only with the experimental USE_SNMALLOC
# cmake option.
add_enclave_library(
  oesnmalloc_obj
  OBJECT
  allocator.cpp
  # List the following as sources of oesnmalloc in order to ensure that
  # the musl_includes and libcxx includes complete before oesnmalloc build is
  # started.
  deprecations.h
  __config.h)

if (OE_TRUSTZONE)
  enclave_link_libraries(oesnmalloc_obj PUBLIC oelibutee_includes)
  set(TEE_C_FLAGS ${OE_TZ_TA_C_FLAGS})
else ()
  set(TEE_C_FLAGS -mcx16)
endif ()

enclave_compile_options(
  oesnmalloc_obj
  PRIVATE
  -I${CMAKE_CURRENT_SOURCE_DIR}/snmalloc/src
  -I${PROJECT_SOURCE_DIR}/include
  # Explicitly specify include folders in correct order.
  -I${LIBCXX_INCLUDES}
  -I${PROJECT_BINARY_DIR}/output/include/openenclave/libc
  -Wno-conversion
  -ftls-model=local-exec
  -nostdinc++
  -nostdinc
  -fPIE
  -ffreestanding
  ${TEE_C_FLAGS}
  -fno-exceptions
  -fvisibility=hidden)

# Specify the following option as source files properties so that
# it will appear last in the compiler command line and supercede any
# other std specification.
set_source_files_properties(allocator.cpp COMPILE_FLAGS -std=c++17)

maybe_build_using_clangw(oesnmalloc_obj)

# Create snmalloc library to make snmalloc available to the user
# as a pluggable allocator.
add_enclave_library(oesnmalloc STATIC)
enclave_link_libraries(oesnmalloc oesnmalloc_obj)
maybe_build_using_clangw(oesnmalloc)

install_enclaves(
  TARGETS
  oesnmalloc_obj
  oesnmalloc
  EXPORT
  openenclave-targets
  ARCHIVE
  DESTINATION
  ${CMAKE_INSTALL_LIBDIR}/openenclave/enclave)
