# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

---
- name: Gather Ansible facts
  setup:

- name: Azure DCAP Client | Include vars
  include_vars: "{{ ansible_os_family | lower }}.yml"

- name: Azure DCAP Client | Download the Intel SGX self-extracting archives and devcon.exe
  win_get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    timeout: 60
  retries: 3
  with_items:
    - { url: "{{ psw_archive_url }}", dest: "{{ tmp_dir }}\\Intel_SGX_PSW.exe" }
    - { url: "{{ dcap_archive_url }}", dest: "{{ tmp_dir }}\\Intel_SGX_DCAP.exe" }
    - { url: "{{ devcon_bin_url }}", dest: "{{ tmp_dir }}\\devcon.exe" }

- name: Azure DCAP Client | Create new temp directories to be used by Ansible
  block:
    - win_file:
        state: absent
        path: "{{ item }}"
      with_items:
        - "{{ tmp_dir }}\\Intel_SGX_PSW"
        - "{{ tmp_dir }}\\Intel_SGX_DCAP"
        - "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg"

    - win_file:
        state: directory
        path: "{{ item }}"
      with_items:
        - "{{ tmp_dir }}\\Intel_SGX_PSW"
        - "{{ tmp_dir }}\\Intel_SGX_DCAP"
        - "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg"

- name: Azure DCAP Client | Extract files from self-extracting archives
  raw: "{{ item.path }} /auto {{ item.dest_dir }}"
  with_items:
    - { path: "{{ tmp_dir }}\\Intel_SGX_PSW.exe", dest_dir: "{{ tmp_dir }}\\Intel_SGX_PSW" }
    - { path: "{{ tmp_dir }}\\Intel_SGX_DCAP.exe", dest_dir: "{{ tmp_dir }}\\Intel_SGX_DCAP" }

- name: Azure DCAP Client | Remove self-extracting archives
  win_file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ tmp_dir }}\\Intel_SGX_PSW.exe"
    - "{{ tmp_dir }}\\Intel_SGX_DCAP.exe"

- name: Azure DCAP Client | Install Intel SGX Platform Software
  win_shell: |
    $ErrorActionPreference = "Stop"
    $installer = Get-Item "{{ tmp_dir }}\Intel_SGX_PSW\Intel SGX PSW for Windows *\PSW_EXE_RS2_and_before\Intel(R)_SGX_Windows_x64_PSW_*.exe"
    if(!$installer) {
        Throw "Cannot find the installer executable"
    }
    if($installer.Count -gt 1) {
        Throw "Multiple installer executables found"
    }
    $unattendedParams = @('--s', '--a', 'install', '--output={{ tmp_dir }}\Intel_SGX_PSW\psw-installer.log', '--eula=accept', '--no-progress')
    $p = Start-Process -Wait -NoNewWindow -FilePath $installer -ArgumentList $unattendedParams -PassThru
    if($p.ExitCode -ne 0) {
        Get-Content "{{ tmp_dir }}\Intel_SGX_PSW\psw-installer.log"
        Throw "Failed to install Intel PSW"
    }

- name: Azure DCAP Client | Remove existing Intel SGX DCAP drivers (if present)
  register: reboot_needed
  win_shell: |
    $ErrorActionPreference = "Stop"
    $rebootRequired = $false
    $hardwareIDs = @(
        'root\SgxLCDevice',
        'root\SgxLCDevice_DCAP'
    )
    foreach($id in $hardwareIDs) {
        $output = & "{{ tmp_dir }}\devcon.exe" remove $id
        if($LASTEXITCODE -eq 1) {
            #
            # Unfortunately, the exit code is 1 even when the operation was
            # successful, but a reboot is required. So, we parse the output
            # to see if a reboot was requested.
            #
            $output | ForEach-Object {
                if($_.Contains("Removed on reboot")) {
                    $rebootRequired = $true
                    continue
                }
            }
            #
            # If we reach this point, it means that the exit code was 1 and
            # no reboot is needed. Therefore, most probably an error occured.
            #
            Write-Output $output
            Write-Output "ERROR: Failed to remove $id"
            exit 1
        } elseif($LASTEXITCODE -ne 0) {
            Write-Output $output
            Write-Output "ERROR: Unknown exit code $LASTEXITCODE"
            exit 1
        }
    }
    Write-Output $rebootRequired

- name: Azure DCAP Client | Reboot the node (if needed)
  win_reboot:
  when: (reboot_needed.stdout | trim) == "True"

- name: Azure DCAP Client | Install Intel SGX DCAP drivers
  win_shell: |
    $ErrorActionPreference = "Stop"
    $drivers = @{
        'sgx_base_dev' = @{
            'zip_path' = '{{ tmp_dir }}\Intel_SGX_DCAP\Intel SGX DCAP for Windows *\LC_driver_WinServer2016\WinServer2016\Signed_*.zip'
            'location' = 'root\SgxLCDevice'
        }
        'sgx_dcap_dev' = @{
            'zip_path' = '{{ tmp_dir }}\Intel_SGX_DCAP\Intel SGX DCAP for Windows *\DCAP_INF\WinServer2016\Signed_*.zip'
            'location' = 'root\SgxLCDevice_DCAP'
        }
    }
    foreach($driver in $drivers.Keys) {
        $zip = Get-Item $drivers[$driver]['zip_path']
        if(!$zip) {
            Throw "Cannot find the zile file with $driver"
        }
        if($zip.Count -gt 1) {
            $zip
            Throw "Multiple driver zip files found"
        }
        New-Item -ItemType Directory -Force -Path "{{ tmp_dir }}\Intel_SGX_DCAP\$driver"
        Expand-Archive -Path $zip -DestinationPath "{{ tmp_dir }}\Intel_SGX_DCAP\$driver" -Force
        $inf = Get-Item "{{ tmp_dir }}\Intel_SGX_DCAP\$driver\drivers\*\$driver.inf"
        if(!$inf) {
            Throw "Cannot find $driver.inf file"
        }
        if($inf.Count -gt 1) {
            $inf
            Throw "Multiple $driver.inf files found"
        }
        & "{{ tmp_dir }}\devcon.exe" install "$($inf.FullName)" $drivers[$driver]['location']
        if($LASTEXITCODE) {
            Throw "Failed to install $driver driver"
        }
    }

- name: Azure DCAP Client | Download Azure DCAP Client nupkg file
  win_get_url:
    url: "{{ azure_dcap_client_nupkg_url }}"
    dest: "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg\\{{ azure_dcap_client_nupkg_url.split('/')[-1] }}"
    timeout: 60
  retries: 3

- name: Azure DCAP Client | Copy the Intel nupkg files
  win_shell: |
    $ErrorActionPreference = "Stop"
    $nupkgDir = Get-Item "{{ tmp_dir }}\Intel_SGX_DCAP\Intel SGX DCAP for Windows *\nupkg"
    if(!$nupkgDir) {
        Throw "Cannot find the Intel DCAP nupkg directory"
    }
    if($nupkgDir.Count -gt 1) {
        Throw "Multiple Intel DCAP nupkg directories found"
    }
    Copy-Item -Recurse -Force "$nupkgDir\*" "{{ tmp_dir }}\Azure_DCAP_Cient_nupkg"

- name: Azure DCAP Client | Create the OE nuget directory
  win_file:
    state: directory
    path: "{{ oe_nuget_dir }}"

- name: Azure DCAP Client | Download NuGet binary
  win_get_url:
    url: "{{ nuget_bin_url }}"
    dest: "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg\\nuget.exe"
    timeout: 60
  retries: 3

- name: Azure DCAP Client | Install the nupkg packages
  raw: >
    {{ tmp_dir }}\\Azure_DCAP_Cient_nupkg\\nuget.exe install '{{ item.name }}' -Source '{{ item.source }}' -OutputDirectory '{{ oe_nuget_dir }}' -ExcludeVersion
  register: result
  retries: 5
  until: result.rc == 0
  with_items:
    - { name: "EnclaveCommonAPI", source: "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg" }
    - { name: "DCAP_Components", source: "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg" }
    - { name: "Microsoft.Azure.DCAP.Client", source: "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg;nuget.org" }

- name: Azure DCAP Client | Enable LC driver
  block:
    - name: Azure DCAP Client | Set LC driver registry enable flag
      win_regedit:
        path: '{{ lc_driver.reg_path }}'
        name: '{{ lc_driver.reg_key }}'
        data: '{{ lc_driver.reg_value }}'
        type: dword

- name: Azure DCAP Client | Reboot the node
  win_reboot:

- name: Azure DCAP Client | Remove temp install directories and files
  win_file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ tmp_dir }}\\Intel_SGX_PSW"
    - "{{ tmp_dir }}\\Intel_SGX_DCAP"
    - "{{ tmp_dir }}\\Azure_DCAP_Cient_nupkg"
    - "{{ tmp_dir }}\\devcon.exe"
